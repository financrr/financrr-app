//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.4

use sea_orm::entity::prelude::*;
use sea_orm::Condition;
use serde::{Deserialize, Serialize};

use crate::permissions::find_all_by_user_id;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "transaction")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub source: Option<i32>,
    pub destination: Option<i32>,
    pub amount: i64,
    pub currency: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub budget: Option<i32>,
    pub executed_at: TimeDateTimeWithTimeZone,
    pub created_at: TimeDateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::account::Entity",
        from = "Column::Destination",
        to = "super::account::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Account2,
    #[sea_orm(
        belongs_to = "super::account::Entity",
        from = "Column::Source",
        to = "super::account::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Account1,
    #[sea_orm(
        belongs_to = "super::budget::Entity",
        from = "Column::Budget",
        to = "super::budget::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Budget,
    #[sea_orm(
        belongs_to = "super::currency::Entity",
        from = "Column::Currency",
        to = "super::currency::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Currency,
}

impl Related<super::budget::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Budget.def()
    }
}

impl Related<super::currency::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Currency.def()
    }
}

impl Related<super::account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Account1.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

find_all_by_user_id!(Entity);

impl Entity {
    pub fn find_all_by_account_id(account_id: i32) -> Select<Self> {
        Self::find().filter(Condition::any().add(Column::Source.eq(account_id)).add(Column::Destination.eq(account_id)))
    }

    pub fn find_all_by_budget_id(budget_id: i32) -> Select<Self> {
        Self::find().filter(Column::Budget.eq(budget_id))
    }
}
