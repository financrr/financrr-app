//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "go_cardless_requisitions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    #[sea_orm(column_type = "Text", unique)]
    pub external_id: String,
    #[sea_orm(column_type = "Text", unique)]
    pub link: String,
    pub agreement_id: i64,
    pub external_bank_institution_id: i64,
    pub user_id: i64,
    pub used_at: Option<DateTimeWithTimeZone>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::external_bank_institutions::Entity",
        from = "Column::ExternalBankInstitutionId",
        to = "super::external_bank_institutions::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ExternalBankInstitutions,
    #[sea_orm(
        belongs_to = "super::go_cardless_enduser_agreements::Entity",
        from = "Column::AgreementId",
        to = "super::go_cardless_enduser_agreements::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GoCardlessEnduserAgreements,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::external_bank_institutions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ExternalBankInstitutions.def()
    }
}

impl Related<super::go_cardless_enduser_agreements::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GoCardlessEnduserAgreements.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}
