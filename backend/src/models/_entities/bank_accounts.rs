//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "bank_accounts")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    #[sea_orm(unique)]
    pub currency_id: i64,
    pub imported_bank_account_id: Option<i64>,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub iban: Option<String>,
    pub available_balance: i64,
    pub expected_balance: i64,
    pub original_balance: i64,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::currencies::Entity",
        from = "Column::CurrencyId",
        to = "super::currencies::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Currencies,
    #[sea_orm(
        belongs_to = "super::imported_bank_accounts::Entity",
        from = "Column::ImportedBankAccountId",
        to = "super::imported_bank_accounts::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    ImportedBankAccounts,
    #[sea_orm(has_many = "super::transaction_parties::Entity")]
    TransactionParties,
}

impl Related<super::currencies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Currencies.def()
    }
}

impl Related<super::imported_bank_accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ImportedBankAccounts.def()
    }
}

impl Related<super::transaction_parties::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TransactionParties.def()
    }
}
