//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "categories")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    pub parent_id: Option<i64>,
    pub user_id: Option<i64>,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::budget_criteria_categories::Entity")]
    BudgetCriteriaCategories,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    SelfRef,
    #[sea_orm(has_many = "super::contracts::Entity")]
    Contracts,
    #[sea_orm(has_many = "super::inactive_contracts::Entity")]
    InactiveContracts,
    #[sea_orm(has_many = "super::pending_transactions::Entity")]
    PendingTransactions,
    #[sea_orm(has_many = "super::recurring_transactions::Entity")]
    RecurringTransactions,
    #[sea_orm(has_many = "super::transaction_templates::Entity")]
    TransactionTemplates,
    #[sea_orm(has_many = "super::transactions::Entity")]
    Transactions,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::budget_criteria_categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BudgetCriteriaCategories.def()
    }
}

impl Related<super::contracts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Contracts.def()
    }
}

impl Related<super::inactive_contracts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::InactiveContracts.def()
    }
}

impl Related<super::pending_transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PendingTransactions.def()
    }
}

impl Related<super::recurring_transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RecurringTransactions.def()
    }
}

impl Related<super::transaction_templates::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TransactionTemplates.def()
    }
}

impl Related<super::transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transactions.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::budget_criteria::Entity> for Entity {
    fn to() -> RelationDef {
        super::budget_criteria_categories::Relation::BudgetCriteria.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::budget_criteria_categories::Relation::Categories.def().rev())
    }
}
