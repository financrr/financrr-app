//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "recurring_transaction")]
pub(crate) struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub(crate) id: i64,
    pub(crate) template: i64,
    pub(crate) recurring_rule: Json,
    pub(crate) last_executed_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub(crate) enum Relation {
    #[sea_orm(
        belongs_to = "super::transaction_template::Entity",
        from = "Column::Template",
        to = "super::transaction_template::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    TransactionTemplate,
}

impl Related<super::transaction_template::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TransactionTemplate.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
