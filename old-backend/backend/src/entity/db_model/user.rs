//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub(crate) struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub(crate) id: i64,
    #[sea_orm(column_type = "Text", unique)]
    pub(crate) username: String,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub(crate) email: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub(crate) display_name: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub(crate) password: String,
    pub(crate) permissions: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub(crate) enum Relation {
    #[sea_orm(has_many = "super::budget::Entity")]
    Budget,
    #[sea_orm(has_many = "super::currency::Entity")]
    Currency,
    #[sea_orm(has_many = "super::permissions::Entity")]
    Permissions,
    #[sea_orm(has_many = "super::session::Entity")]
    Session,
}

impl Related<super::budget::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Budget.def()
    }
}

impl Related<super::currency::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Currency.def()
    }
}

impl Related<super::permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Permissions.def()
    }
}

impl Related<super::session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Session.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
