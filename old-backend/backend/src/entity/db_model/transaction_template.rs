//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "transaction_template")]
pub(crate) struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub(crate) id: i64,
    pub(crate) source: Option<i64>,
    pub(crate) destination: Option<i64>,
    pub(crate) amount: i64,
    pub(crate) currency: i64,
    #[sea_orm(column_type = "Text")]
    pub(crate) name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub(crate) description: Option<String>,
    pub(crate) budget: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub(crate) enum Relation {
    #[sea_orm(
        belongs_to = "super::account::Entity",
        from = "Column::Destination",
        to = "super::account::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Account2,
    #[sea_orm(
        belongs_to = "super::account::Entity",
        from = "Column::Source",
        to = "super::account::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Account1,
    #[sea_orm(
        belongs_to = "super::budget::Entity",
        from = "Column::Budget",
        to = "super::budget::Column::Id",
        on_update = "SetNull",
        on_delete = "SetNull"
    )]
    Budget,
    #[sea_orm(
        belongs_to = "super::currency::Entity",
        from = "Column::Currency",
        to = "super::currency::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Currency,
    #[sea_orm(has_many = "super::recurring_transaction::Entity")]
    RecurringTransaction,
}

impl Related<super::budget::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Budget.def()
    }
}

impl Related<super::currency::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Currency.def()
    }
}

impl Related<super::recurring_transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RecurringTransaction.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
