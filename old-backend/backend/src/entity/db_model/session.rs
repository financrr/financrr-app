//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;
use sea_orm::{DeleteMany, Order, QueryOrder, QuerySelect};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "session")]
pub(crate) struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub(crate) id: i64,
    #[sea_orm(column_type = "Text", unique)]
    pub(crate) token: String,
    #[sea_orm(column_type = "Text")]
    pub(crate) name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub(crate) description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub(crate) platform: Option<String>,
    pub(crate) user: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub(crate) enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::User",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
