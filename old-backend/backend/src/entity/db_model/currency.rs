//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use crate::snowflake::snowflake_type::Snowflake;
use sea_orm::entity::prelude::*;
use sea_orm::{Condition, Order, QueryOrder};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "currency")]
pub(crate) struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub(crate) id: i64,
    #[sea_orm(column_type = "Text")]
    pub(crate) name: String,
    #[sea_orm(column_type = "Text")]
    pub(crate) symbol: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub(crate) iso_code: Option<String>,
    pub(crate) decimal_places: i32,
    pub(crate) user: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub(crate) enum Relation {
    #[sea_orm(has_many = "super::account::Entity")]
    Account,
    #[sea_orm(has_many = "super::transaction::Entity")]
    Transaction,
    #[sea_orm(has_many = "super::transaction_template::Entity")]
    TransactionTemplate,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::User",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Account.def()
    }
}

impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transaction.def()
    }
}

impl Related<super::transaction_template::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TransactionTemplate.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Entity {
    pub(crate) fn find_all_with_no_user() -> Select<Self> {
        Self::find().filter(Column::User.is_null()).order_by(Column::Id, Order::Desc)
    }

    pub(crate) fn find_all_with_user_id(user_id: Snowflake) -> Select<Self> {
        Self::find().filter(Column::User.eq(user_id)).order_by(Column::Id, Order::Desc)
    }

    pub(crate) fn find_all_with_no_user_and_user_id(user_id: Snowflake) -> Select<Self> {
        Self::find()
            .filter(Condition::any().add(Column::User.is_null()).add(Column::User.eq(user_id)))
            .order_by(Column::Id, Order::Desc)
    }

    pub(crate) fn find_by_id_with_no_user(id: Snowflake) -> Select<Self> {
        Self::find().filter(Column::Id.eq(id)).filter(Column::User.is_null()).order_by(Column::Id, Order::Desc)
    }

    pub(crate) fn find_by_id_related_with_user_id(id: Snowflake, user_id: Snowflake) -> Select<Self> {
        Self::find().filter(Column::Id.eq(id)).filter(Column::User.eq(user_id)).order_by(Column::Id, Order::Desc)
    }

    pub(crate) fn find_by_id_include_user_id(id: Snowflake, user_id: Snowflake) -> Select<Self> {
        Self::find()
            .filter(Column::Id.eq(id))
            .filter(Condition::any().add(Column::User.is_null()).add(Column::User.eq(user_id)))
            .order_by(Column::Id, Order::Desc)
    }
}
